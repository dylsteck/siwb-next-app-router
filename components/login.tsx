"use client";

import "@farcaster/auth-kit/styles.css";
import Head from "next/head";
import { useSession, signIn, getCsrfToken } from "next-auth/react";
import { SignInButton, AuthKitProvider, StatusAPIResponse } from "@farcaster/auth-kit";
import { useCallback, useState } from "react";
import { useMiniAppContext } from "./mini-app-provider";
import sdk from "@farcaster/miniapp-sdk";
import LoggedIn from "./logged-in";
import ViewAsMiniapp from "./view-as-miniapp";

const config = {
  relay: "https://relay.farcaster.xyz",
  rpcUrl: "https://mainnet.optimism.io",
  siweUri: "http://siwf-next-app-router.vercel.app",
  domain: "siwf-next-app-router.vercel.app",
};

function Login() {
  return (
    <>
      <Head>
        <title>Farcaster AuthKit + NextAuth Demo</title>
      </Head>
      <main style={{ fontFamily: "Inter, sans-serif" }}>
        <AuthKitProvider config={config}>
          <Content />
        </AuthKitProvider>
      </main>
    </>
  );
}

Login.Form = function LoginForm() {
  const [error, setError] = useState(false);
  const { context, isInMiniApp } = useMiniAppContext();

  const getNonce = useCallback(async () => {
    console.log("Getting CSRF token...");
    const nonce = await getCsrfToken();
    console.log("CSRF token:", nonce);
    if (!nonce) throw new Error("Unable to generate nonce");
    return nonce;
  }, []);

  const handleMiniAppSignIn = useCallback(async () => {
    const nonce = await getNonce();
    const auth = await sdk.actions.signIn({ nonce, acceptAuthAddress: true });
    signIn("credentials", {
      message: auth.message,
      signature: auth.signature as `0x${string}`,
      name: context?.user.username,
      pfp: context?.user.pfpUrl,
      csrfToken: nonce,
      redirect: false,
    });
  }, [getNonce, context?.user.username, context?.user.pfpUrl]);

  const handleSuccess = useCallback(
    (res: StatusAPIResponse) => {
      signIn("credentials", {
        message: res.message,
        signature: res.signature,
        name: res.username,
        pfp: res.pfpUrl,
        csrfToken: (res as unknown as any).csrfToken,
        redirect: false,
      });
    },
    []
  );

  return (
    <div>
      <div style={{ position: "fixed", top: "12px", right: "12px" }}>
        {isInMiniApp ? (
          <button onClick={handleMiniAppSignIn}>Sign In</button>
        ) : (
          <SignInButton
            nonce={getNonce}
            onSuccess={handleSuccess}
            onError={() => setError(true)}
          />
        )}
        {error && <div>Unable to sign in at this time.</div>}
      </div>
      <div style={{ paddingTop: "33vh", textAlign: "center" }}>
        <h1>Sign In with Farcaster + NextAuth</h1>
        <p>
          This example app shows how to use{" "}
          <a
            href="https://docs.farcaster.xyz/developers/siwf"
            target="_blank" rel="noreferrer"
          >
            Sign In with Farcaster
          </a>{" "}
          and{" "}
          <a href="https://next-auth.js.org/" target="_blank" rel="noreferrer">
            NextAuth.js
          </a>
          .{" "}<br/>
          On web, SIWF is generated by the{" "}
          <a
            href="https://docs.farcaster.xyz/auth-kit/"
            target="_blank" rel="noreferrer"
          >
            @farcaster/auth-kit
          </a>{" "}
          package and as a mini app it uses the{" "}
          <a
            href="https://miniapps.farcaster.xyz/docs/getting-started#manual-setup"
            target="_blank" rel="noreferrer"
          >
            @farcaster/miniapp-sdk
          </a>{" "}
          package.
        </p>
        <p>
          Click the &quot;Sign in&quot; button above to try out the demo
        </p>
        {!isInMiniApp && (
        <>
          <p>
            You can also scan the QR codes below to test as a mini app
          </p>
            <div style={{ display: "flex", justifyContent: "center", gap: "40px", marginTop: "40px" }}>
              <div style={{ textAlign: "center" }}>
                <h3>Test on Base</h3>
                <ViewAsMiniapp client="base" />
              </div>
            </div>
        </>
        )}
      </div>
    </div>
  );
};

function Content() {
  const { data: session } = useSession();

  return session ? <LoggedIn /> : <Login.Form />;
}

export default Login;